// Code generated by gen/gen_bench.go; DO NOT EDIT.
package main

import (
	"testing"
)

{{ range $n := Items .Length }}

type Value{{ $n }} struct {
     {{ range $v := Items $n }}v{{ $v }} int64
{{ end }}	
}

func NewValue{{ $n }}Entity() Value{{ $n }} {
	return Value{{ $n }}{
	       {{ range $v := Items $n }}v{{ $v }}: {{ $v }},
{{ end }}
	}
}

func NewValue{{ $n }}Ref() *Value{{ $n }} {
	return &Value{{ $n }}{
	       {{ range $v := Items $n }}v{{ $v }}: {{ $v }},
{{ end }}
	}
}

func InitValue{{ $n }}(v *Value{{ $n }}) {
	{{ range $v := Items $n }}v.v{{ $v }} = {{ $v }}
	{{ end }}
}

func (v Value{{ $n }})Init() Value{{ $n }}{
     {{ range $v := Items $n }}v.v{{ $v }} = {{ $v }}
     {{ end }}
     return v
}

func (v *Value{{ $n }})InitRef() {
     {{ range $v := Items $n }}v.v{{ $v }} = {{ $v }}
     {{ end }}
}
	

func Benchmark_値返し_______________メンバ数{{ $n }}(b *testing.B) {
	var v Value{{ $n }}
	for i := 0; i <b.N; i++ {
		v = NewValue{{ $n }}Entity()
	}
	if v.v{{ $n }} != {{ $n }} {
		b.Errorf("v{{ $n }} is not {{ $n }}")
	}
}

func Benchmark_値返しメソッド_______メンバ数{{ $n }}(b *testing.B) {
        var v Value{{ $n }}
	for i := 0; i <b.N; i++ {
		v = v.Init()
	}
	if v.v{{ $n }} != {{ $n }} {
		b.Errorf("v{{ $n }} is not {{ $n }}")
	}
}

func Benchmark_ポインタ返し_________メンバ数{{ $n }}(b *testing.B) {
	var v *Value{{ $n }}
	for i := 0; i <b.N; i++ {
		v = NewValue{{ $n }}Ref()
	}
	if v.v{{ $n }} != {{ $n }} {
		b.Errorf("v{{ $n }} is not {{ $n }}")
	}

}

func Benchmark_ポインタ渡し_________メンバ数{{ $n }}(b *testing.B) {
	var v Value{{ $n }}
	for i := 0; i <b.N; i++ {
	        v = Value{{ $n }}{}
		InitValue{{ $n }}(&v)
	}
	if v.v{{ $n }} != {{ $n }} {
		b.Errorf("v{{ $n }} is not {{ $n }}")
	}
}

func Benchmark_ポインタ渡しメソッド_メンバ数{{ $n }}(b *testing.B) {
     	var v Value{{ $n }}
	for i := 0; i <b.N; i++ {
	        v = Value{{ $n }}{}
		(&v).InitRef()
	}
	if v.v{{ $n }} != {{ $n }} {
		b.Errorf("v{{ $n }} is not {{ $n }}")
	}
}

{{ end }}
