// Code generated by gen/gen_bench.go; DO NOT EDIT.
package main

import (
	"testing"
)

{{ range $n := Items .Length }}

type Value{{ $n }} struct {
     {{ range $v := Items $n }}v{{ $v }} int
{{ end }}
}

func SumValue{{ $n }}(v Value{{ $n }}) int {
	return {{ range $v := Items $n }}{{ if ne $v 1}}+ {{end}}v.v{{ $v }}{{ end }}
}

func SumValue{{ $n }}Pointer(v *Value{{ $n }}) int {
	return {{ range $v := Items $n }}{{ if ne $v 1}}+ {{end}}v.v{{ $v }}{{ end }}
}

func Benchmark_call_pointer{{$n}}(b *testing.B) {
	v := Value{{$n}}{
		{{ range $v := Items $n }}v{{ $v }}: {{ $v }},
{{ end }}
	}
	var sum int
	b.ResetTimer()
	for i := 0; i <b.N; i++ {
		sum = SumValue{{ $n }}Pointer(&v)
	}
	if sum != {{ Sum $n  }} {
		b.Errorf("Sum value must be {{ Sum $n }}")
	}
}

func Benchmark_call_value{{$n}}(b *testing.B) {
	v := Value{{$n}}{
		{{ range $v := Items $n }}v{{ $v }}: {{ $v }},
{{ end }}
	}
	var sum int
	b.ResetTimer()
	for i := 0; i <b.N; i++ {
		sum = SumValue{{ $n }}(v)
	}
	if sum != {{ Sum $n }} {
		b.Errorf("sum value must be {{ Sum $n }}")
	}
}

func Benchmark_noncall{{$n}}(b *testing.B) {
	v := Value{{$n}}{
		{{ range $v := Items $n }}v{{ $v }}: {{ $v }},
{{ end }}
	}
	var sum int
	b.ResetTimer()
	for i := 0; i<b.N; i++ {
		sum = {{ range $v := Items $n }}{{ if ne $v 1 }}+ {{ end }}v.v{{ $v }}{{ end }}
	}
	if sum != {{ Sum $n }} {
		b.Errorf("sum value must be {{ Sum $n }}")
	}
}

{{ end }}
